[project]
name = "pidgin-ai"
version = "0.1.0"
description = "AI conversation research tool for studying emergent communication patterns"
authors = [{name = "Your Name", email = "your.email@example.com"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11,<3.14"
keywords = ["ai", "llm", "conversation", "research", "communication", "anthropic", "openai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "click>=8.0.0",
    "rich>=13.0.0",
    "rich-click>=1.8.0",
    "pydantic>=2.0.0",
    "anthropic>=0.25.0,<1.0.0",
    "openai>=1.0.0",
    "google-generativeai>=0.8.0",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.0",
    "aiohttp>=3.9.0",
    "urllib3>=2.5.0",
    "requests>=2.32.4",
    "duckdb>=1.1.3",
    "setproctitle>=1.3",
]

[project.urls]
Homepage = "https://github.com/tensegrity-ai/pidgin"
Repository = "https://github.com/tensegrity-ai/pidgin"
Documentation = "https://github.com/tensegrity-ai/pidgin#readme"

[project.scripts]
pidgin = "pidgin.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["pidgin"]

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "pytest-timeout>=2.2.0",
    "hypothesis>=6.100.0",
    "freezegun>=1.4.0",
    "responses>=0.25.0",
    "faker>=24.0.0",
    "black>=24.3.0",
    "ruff>=0.8.0",
    "mypy>=1.0.0",
    "types-pyyaml>=6.0.0",
    "bandit[toml]>=1.7.0",
    "safety>=3.0.0",
    "pre-commit>=3.0.0",
    "radon>=6.0.1",
    "autoflake>=2.3.1",
]

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.9"
warn_return_any = false
warn_unused_configs = false
ignore_missing_imports = true
no_implicit_optional = false
strict_optional = false
check_untyped_defs = false
allow_untyped_defs = true
allow_incomplete_defs = true
allow_untyped_calls = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Removed coverage - we don't care about percentages
addopts = ""
filterwarnings = [
    "ignore:coroutine 'AsyncMockMixin._execute_mock_call' was never awaited:RuntimeWarning",
    "ignore::RuntimeWarning:coverage.parser",
    "ignore:urllib3 v2 only supports OpenSSL.*:urllib3.exceptions.NotOpenSSLWarning",
]
markers = [
    "unit: Unit tests that run in isolation",
    "integration: Integration tests that use real components",
    "slow: Tests that take more than 1 second to run",
    "database: Tests that require a real database connection",
    "benchmark: Performance benchmark tests",
]

[tool.coverage.run]
source = ["pidgin"]
omit = [
    "*/tests/*",
    "*/conftest.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
# No minimum coverage requirement for now - focusing on functionality over metrics

# Show missing lines
show_missing = true

# Skip files with no executable code
skip_empty = true

# Exclude lines from coverage
exclude_lines = [
    # Standard pragma
    "pragma: no cover",
    
    # Don't complain about missing debug-only code
    "def __repr__",
    "def __str__",
    
    # Don't complain if tests don't hit defensive assertion code
    "raise AssertionError",
    "raise NotImplementedError",
    
    # Don't complain if non-runnable code isn't run
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    
    # Don't complain about abstract methods
    "@abstractmethod",
    "@abc.abstractmethod",
    
    # Defensive programming
    "except ImportError:",
    "except KeyError:",
    "except AttributeError:",
    
    # Platform-specific code
    "if sys.platform",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",  # Line length handled by formatter
    "E402",  # Module import not at top of file - sometimes needed
    "B007",  # Unused loop control variable - common pattern
    "B027",  # Empty method in abstract base class - intentional default implementations
    "B904",  # raise without from - not always needed
    "RUF001", # Ambiguous unicode characters - we use math symbols intentionally
    "RUF006", # Asyncio task not stored - fire-and-forget tasks are intentional
    "RUF012", # Mutable class defaults - intentional in some cases
    "RUF013", # Implicit optional - fixing would be a big change
    "RUF022", # Unsorted __all__ - cosmetic
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["S101", "S106", "S105"]  # Allow asserts and hardcoded passwords in tests
"pidgin/analysis/notebook_generator.py" = ["F401"]  # nbformat imports used conditionally
"pidgin/experiments/process_launcher.py" = ["F401"]  # setproctitle import checked conditionally
"tests/integration/test_conversation.py" = ["F401"]  # Import test only

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101"]  # Skip assert_used test