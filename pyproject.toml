[tool.poetry]
name = "pidgin"
version = "0.1.0"
description = "AI conversation research tool"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
license = "MIT"
packages = [{include = "pidgin"}]

[tool.poetry.dependencies]
python = "^3.9"
click = "^8.0.0"
rich = "^13.0.0"
rich-click = "^1.8.0"
pydantic = "^2.0.0"
anthropic = ">=0.25.0,<1.0.0"
openai = "^1.0.0"
google-generativeai = "^0.8.0"
python-dotenv = "^1.0.0"
pyyaml = "^6.0.0"
aiohttp = "^3.9.0"
urllib3 = "^2.5.0"
requests = "^2.32.4"
duckdb = "^1.1.3"
setproctitle = {version = "^1.3", optional = true}

[tool.poetry.extras]
daemon = ["setproctitle"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
pytest-asyncio = "^0.21.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
pytest-timeout = "^2.2.0"
hypothesis = "^6.100.0"
freezegun = "^1.4.0"
responses = "^0.25.0"
faker = "^24.0.0"
black = "^24.3.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
isort = "^5.0.0"
pre-commit = "^3.0.0"
radon = "^6.0.1"
autoflake = "^2.3.1"

[tool.poetry.scripts]
pidgin = "pidgin.cli:main"
pidgin-format = "pidgin.scripts:format"
pidgin-lint = "pidgin.scripts:lint"
pidgin-typecheck = "pidgin.scripts:typecheck"
pidgin-check = "pidgin.scripts:check"
pidgin-test = "pidgin.scripts:test"
pidgin-build = "pidgin.scripts:build"
pidgin-install-pipx = "pidgin.scripts:install_pipx"
pidgin-clean = "pidgin.scripts:clean"
pidgin-reset = "pidgin.scripts:reset"
pidgin-dev = "pidgin.scripts:dev"
pidgin-status = "pidgin.scripts:status"
pidgin-quick-test = "pidgin.scripts:quick_test"
pidgin-ci = "pidgin.scripts:ci"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=pidgin"
filterwarnings = [
    "ignore:coroutine 'AsyncMockMixin._execute_mock_call' was never awaited:RuntimeWarning",
    "ignore::RuntimeWarning:coverage.parser",
]
markers = [
    "unit: Unit tests that run in isolation",
    "integration: Integration tests that use real components",
    "slow: Tests that take more than 1 second to run",
    "database: Tests that require a real database connection",
    "benchmark: Performance benchmark tests",
]

[tool.coverage.run]
source = ["pidgin"]
omit = [
    "*/tests/*",
    "*/conftest.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
# Overall project minimum
fail_under = 60

# Show missing lines
show_missing = true

# Skip files with no executable code
skip_empty = true

# Exclude lines from coverage
exclude_lines = [
    # Standard pragma
    "pragma: no cover",
    
    # Don't complain about missing debug-only code
    "def __repr__",
    "def __str__",
    
    # Don't complain if tests don't hit defensive assertion code
    "raise AssertionError",
    "raise NotImplementedError",
    
    # Don't complain if non-runnable code isn't run
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    
    # Don't complain about abstract methods
    "@abstractmethod",
    "@abc.abstractmethod",
    
    # Defensive programming
    "except ImportError:",
    "except KeyError:",
    "except AttributeError:",
    
    # Platform-specific code
    "if sys.platform",
]

[tool.coverage.html]
directory = "htmlcov"